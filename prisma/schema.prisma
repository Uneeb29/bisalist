// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model for the customer
model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String   @unique
  password  String
  offers    Boolean? @default(false)
  agreement Boolean
}

// model for the vendor
model Vendor {
  id              Int       @id @default(autoincrement())
  firstname       String
  lastname        String
  streetName      String
  city            String
  postAddress     String
  telephoneNumber String    @unique
  description     String
  email           String    @unique
  password        String
  avi             String? // these images are for the user profile
  fileType        String
  // foreign key (creates a relationship between the vendor and the listing)
  services        Service[]
}

// model for the services offered by the vendor
model Service {
  id           Int     @id @default(autoincrement())
  title        String? // service title
  companyName  String? // company name 
  noOfComments Int?
  rating       Float?
  location     String // vendor street + city
  cover        String?
  startingCost Int?
  vendorId     Int
  categoryId   Int

  // foreign key (creates a relationship between the listing and the vendor)
  vendor   Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  // foreign key (creates a relationship between the listing and the category)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

// a model to store only categories and their images
// will only be updated by the admin
model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  image    String? //will be base64 encoded image 
  services Service[]
}
